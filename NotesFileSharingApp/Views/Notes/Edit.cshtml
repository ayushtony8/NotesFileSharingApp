@model NotesFileSharingApp.DTOs.UpdateNoteDto
@{
    ViewData["Title"] = "Edit Note";
}

<div class="row justify-content-center">
    <div class="col-lg-8">
        <div class="card shadow-modern hover-lift">
            <div class="card-header" style="background-color: var(--warning-color) !important;">
                <h4 class="card-title mb-0">
                    <i class="bi bi-pencil-square me-2"></i>Edit Note
                </h4>
            </div>
            <div class="card-body p-4">
                <form asp-action="Edit" method="post">
                    <input asp-for="Id" type="hidden" />
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    
                    <div class="mb-4">
                        <label asp-for="Title" class="form-label fw-semibold">Note Title</label>
                        <input asp-for="Title" class="form-control form-control-lg" 
                               placeholder="Enter a descriptive title for your note" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <div class="mb-4">
                        <label asp-for="Content" class="form-label fw-semibold">Note Content</label>
                        <textarea asp-for="Content" class="form-control" rows="15" 
                                  placeholder="Write your note content here..." 
                                  style="resize: vertical; min-height: 300px;"></textarea>
                        <span asp-validation-for="Content" class="text-danger"></span>
                        <div class="form-text">
                            <i class="bi bi-info-circle me-1"></i>
                            Make your changes and save when ready. Your changes are automatically saved as drafts.
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left me-1"></i> Cancel
                        </a>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-info" onclick="resetChanges()">
                                <i class="bi bi-arrow-clockwise me-1"></i> Reset Changes
                            </button>
                            <button type="submit" class="btn btn-warning">
                                <i class="bi bi-check-lg me-1"></i> Save Changes
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Auto-save Status Card -->
        <div class="card mt-4 shadow-modern" id="autoSaveCard" style="display: none;">
            <div class="card-body p-3">
                <div class="d-flex align-items-center">
                    <i class="bi bi-cloud-check text-success me-2"></i>
                    <small class="text-muted">
                        <span id="autoSaveStatus">Draft saved automatically</span>
                        <span id="autoSaveTime" class="ms-2"></span>
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Store original values
        let originalTitle = document.getElementById('Title').value;
        let originalContent = document.getElementById('Content').value;
        
        function resetChanges() {
            if (confirm('Are you sure you want to reset all changes? This will restore the original content.')) {
                document.getElementById('Title').value = originalTitle;
                document.getElementById('Content').value = originalContent;
                
                // Hide auto-save status
                document.getElementById('autoSaveCard').style.display = 'none';
                
                // Show reset confirmation
                showCleanNotification('Changes have been reset to original content', 'info');
            }
        }
        
        // Warn user about unsaved changes
        let hasChanges = false;
        
        function checkForChanges() {
            const currentTitle = document.getElementById('Title').value;
            const currentContent = document.getElementById('Content').value;
            
            hasChanges = (currentTitle !== originalTitle) || (currentContent !== originalContent);
            
            // Update save button state
            const saveBtn = document.querySelector('button[type="submit"]');
            if (hasChanges) {
                saveBtn.classList.remove('btn-warning');
                saveBtn.classList.add('btn-primary');
                saveBtn.innerHTML = '<i class="bi bi-check-lg me-1"></i> Save Changes';
            } else {
                saveBtn.classList.remove('btn-primary');
                saveBtn.classList.add('btn-warning');
                saveBtn.innerHTML = '<i class="bi bi-check-lg me-1"></i> Save Changes';
            }
        }
        
        // Add event listeners to track changes
        document.getElementById('Title').addEventListener('input', checkForChanges);
        document.getElementById('Content').addEventListener('input', checkForChanges);
        
        // Warn before leaving page if there are unsaved changes
        window.addEventListener('beforeunload', function (e) {
            if (hasChanges) {
                e.preventDefault();
                e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
                return e.returnValue;
            }
        });
        
        // Don't warn when form is submitted
        document.querySelector('form').addEventListener('submit', function() {
            hasChanges = false;
            
            // Show loading state
            const saveBtn = document.querySelector('button[type="submit"]');
            setLoadingState(saveBtn, true);
        });
        
        // Auto-save functionality
        let autoSaveTimer;
        
        function autoSave() {
            const noteId = document.querySelector('input[name="Id"]').value;
            const title = document.getElementById('Title').value.trim();
            const content = document.getElementById('Content').value.trim();
            
            if (title || content) {
                localStorage.setItem('editDraftNote_' + noteId, JSON.stringify({
                    title: title,
                    content: content,
                    timestamp: new Date().toISOString()
                }));
                
                // Show auto-save status
                const autoSaveCard = document.getElementById('autoSaveCard');
                const autoSaveTime = document.getElementById('autoSaveTime');
                autoSaveCard.style.display = 'block';
                autoSaveTime.textContent = 'at ' + new Date().toLocaleTimeString();
                
                console.log('Auto-saved draft');
            }
        }
        
        // Auto-save every 3 seconds after user stops typing
        [document.getElementById('Title'), document.getElementById('Content')].forEach(element => {
            element.addEventListener('input', () => {
                clearTimeout(autoSaveTimer);
                autoSaveTimer = setTimeout(autoSave, 3000);
            });
        });
        
        // Clear draft on successful submission
        document.querySelector('form').addEventListener('submit', () => {
            const noteId = document.querySelector('input[name="Id"]').value;
            localStorage.removeItem('editDraftNote_' + noteId);
        });
        
        // Character counter for content
        const contentTextarea = document.getElementById('Content');
        const titleInput = document.getElementById('Title');
        
        function updateCharacterCount() {
            const contentLength = contentTextarea.value.length;
            const titleLength = titleInput.value.length;
            
            // You can add character count display here if needed
            console.log(`Title: ${titleLength} chars, Content: ${contentLength} chars`);
        }
        
        contentTextarea.addEventListener('input', updateCharacterCount);
        titleInput.addEventListener('input', updateCharacterCount);
        
        // Initial check
        updateCharacterCount();
    </script>
}